import requests
import re
import asyncio
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
from telegram.error import TelegramError
import logging

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

logging.getLogger('httpx').setLevel(logging.WARNING)

bot_token = '' #–£–ö–ê–ñ–ò –¢–û–ö–ï–ù
chain_id = 'abstract' # –£–ö–ê–ñ–ò –ì–û–í–ù–û–ß–ï–ô–ù, –ù–ê–ü–†–ò–ú–ï–†: SOLANA / TON

TOKEN_ADDRESS, UPDATE_INTERVAL = range(2)

def send_message(chat_id, message):
    telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML'
    }
    try:
        response = requests.post(telegram_url, data=payload, timeout=10)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def format_large_number(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –≤ –≤–∏–¥ $29.7M –∏–ª–∏ $299k."""
    try:
        value = float(value)
        if value >= 1_000_000:
            return f"${value / 1_000_000:.1f}M"
        elif value >= 1_000:
            return f"${value / 1_000:.0f}k"
        else:
            return f"${value:.2f}"
    except (ValueError, TypeError):
        return "N/A"

async def start(update, context):
    try:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ CA —Ç–æ–∫–µ–Ω–∞:")
        return TOKEN_ADDRESS
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞. –¢—Ä–∞–π–Ω–∏ —Å–Ω–æ–≤–∞")
        return ConversationHandler.END

async def get_token_address(update, context):
    chat_id = update.message.chat_id
    token_address = update.message.text.strip().lower()

    if not re.match(r'^0x[a-f0-9]{40}$', token_address):
        try:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CA"
                "–¢—Ä–∞–π–Ω–∏ —Å–Ω–æ–≤–∞"
            )
            return TOKEN_ADDRESS
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á–µ–∫–µ –∞–¥—Ä–µ—Å–∞: {e}")
            await update.message.reply_text("–æ—à–∏–±–∫–∞(–ø–∏–∑–¥–µ—Ü).")
            return TOKEN_ADDRESS

    context.user_data['token_address'] = token_address
    context.user_data['chat_id'] = chat_id

    try:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–µ(–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")
        return UPDATE_INTERVAL
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ Telegram")
        return ConversationHandler.END

async def get_update_interval(update, context):
    chat_id = update.message.chat_id
    try:
        interval = int(update.message.text.strip())
        if interval < 5:
            await update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥")
            return UPDATE_INTERVAL
    except ValueError:
        await update.message.reply_text("–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ")
        return UPDATE_INTERVAL

    context.user_data['interval'] = interval
    context.user_data['running'] = True

    try:
        await fetch_token_info(chat_id, context.user_data['token_address'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start")
        return ConversationHandler.END

    try:
        await update.message.reply_text(f"–î–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop.")
        asyncio.create_task(periodic_fetch_token_info(context, chat_id, context.user_data['token_address']))
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        await update.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start.")
    return ConversationHandler.END

async def fetch_token_info(chat_id, token_address):
    try:
        url = f"https://api.dexscreener.com/token-pairs/v1/{chain_id}/{token_address}"
        response = requests.get(url, headers={"Accept": "*/*"}, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data and isinstance(data, list) and len(data) > 0:
                # –ò—â–µ–º –ø—É–ª —Ç—É—Ç–∞ (–µ–±–ª—è –ø–∏–∑–¥–µ—Ü –±—ã–ª–∞)
                for pair_data in data:
                    if pair_data.get('baseToken', {}).get('address', '').lower() == token_address:
                        txns = pair_data['txns']
                        volume = pair_data['volume']
                        price_change = pair_data.get('priceChange', {})
                        token_name = pair_data['baseToken']['name']
                        fdv = pair_data.get('fdv', 0)  # –ü–æ–ª—É—á–∞–µ–º FDV, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
                        fdv_display = format_large_number(fdv) if fdv != 0 else "N/A"
                        price_usd = pair_data.get('priceUsd', 'N/A')  # –ü–æ–ª—É—á–∞–µ–º priceUsd
                        message = (
                            f"<b>{token_name}</b>\n\n"
                            f"üìà –ü–æ–∫—É–ø–∫–∏ –∑–∞ 5 –º–∏–Ω—É—Ç: {txns['m5']['buys']}\n"
                            f"üìâ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ 5 –º–∏–Ω—É—Ç: {txns['m5']['sells']}\n"
                            f"üìà –ü–æ–∫—É–ø–∫–∏ –∑–∞ 1 —á–∞—Å: {txns['h1']['buys']}\n"
                            f"üìâ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ 1 —á–∞—Å: {txns['h1']['sells']}\n"
                            f"üìà –ü–æ–∫—É–ø–∫–∏ –∑–∞ 6 —á–∞—Å–æ–≤: {txns['h6']['buys']}\n"
                            f"üìâ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ 6 —á–∞—Å–æ–≤: {txns['h6']['sells']}\n"
                            f"üìà –ü–æ–∫—É–ø–∫–∏ –∑–∞ 24 —á–∞—Å–∞: {txns['h24']['buys']}\n"
                            f"üìâ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ 24 —á–∞—Å–∞: {txns['h24']['sells']}\n\n"
                            f"üí∏ –û–±—ä—ë–º –∑–∞ 5 –º–∏–Ω—É—Ç: {volume['m5']:.2f} USD\n"
                            f"üí∏ –û–±—ä—ë–º –∑–∞ 1 —á–∞—Å: {volume['h1']:.2f} USD\n"
                            f"üí∏ –û–±—ä—ë–º –∑–∞ 6 —á–∞—Å–æ–≤: {volume['h6']:.2f} USD\n"
                            f"üí∞ –û–±—ä—ë–º –∑–∞ 24 —á–∞—Å–∞: {volume['h24']:.2f} USD\n\n"
                            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞: {price_change.get('h24', 'N/A'):.2f}%\n"
                            f"üí≤ –¶–µ–Ω–∞: ${price_usd if price_usd != 'N/A' else 'N/A'}\n\n"
                            f"üè¶ FDV: {fdv_display}"
                        )
                        send_message(chat_id, message)
                        return
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–ª(bad)
                send_message(chat_id, "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—É–ª–∞—Ö")
            else:
                send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–∞—Ö")
        else:
            send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ DexScreener: {response.status_code}")
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DexScreener: {e}")
        send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def periodic_fetch_token_info(context, chat_id, token_address):
    while context.user_data.get('running', False):
        await fetch_token_info(chat_id, token_address)
        await asyncio.sleep(context.user_data.get('interval', 30))

async def stop(update, context):
    try:
        context.user_data['running'] = False
        context.user_data.clear()
        await update.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /stop: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return ConversationHandler.END

async def cancel(update, context): #—Å–∞–º–∞—è –∫–æ–Ω—á–µ–Ω–∞—è —á–∞—Å—Ç—å
    try:
        context.user_data['running'] = False
        context.user_data.clear()
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /cancel: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return ConversationHandler.END

async def error_handler(update, context):
    if isinstance(context.error, TelegramError):
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {context.error}")
        if str(context.error).startswith("Conflict: terminated by other getUpdates request"):
            error_message = "–±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"
        else:
            error_message = "–û—à–∏–±–∫–∞ Telegram"
        if update and update.message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update –Ω–µ None
            await update.message.reply_text(error_message)
    else:
        logger.error(f"–ø–æ–ª–Ω—ã–π –ø–µ–∑–¥–µ—Ü: {context.error}")
        if update and update.message:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–Ω–æ–≤–∞ —Å /start –ø—Ä–æ–ø–∏—à–∏")
    return None

async def unknown_command(update, context):
    try:
        await update.message.reply_text("–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")

def main():
    application = Application.builder().token(bot_token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            TOKEN_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_token_address)],
            UPDATE_INTERVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_update_interval)]
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('stop', stop)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_command))
    application.add_handler(CommandHandler('stop', stop))
    application.add_error_handler(error_handler)

    application.run_polling()

if __name__ == '__main__':

    main()
